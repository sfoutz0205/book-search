{"version":3,"sources":["utils/auth.js","utils/localStorage.js","utils/mutations.js","pages/SearchBooks.js","utils/API.js","utils/queries.js","pages/SavedBooks.js","components/SignupForm.js","components/LoginForm.js","components/Navbar.js","App.js","index.js"],"names":["decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","setItem","window","location","assign","removeItem","removeBookId","bookId","savedBookIds","JSON","parse","updatedSavedBookIds","filter","savedBookId","stringify","LOGIN_USER","gql","ADD_USER","SAVE_BOOK","REMOVE_BOOK","SearchBooks","useState","searchedBooks","setSearchedBooks","searchInput","setSearchInput","setSavedBookIds","useMutation","saveBook","error","useEffect","bookIdArr","length","handleFormSubmit","event","a","preventDefault","fetch","response","ok","Error","json","items","bookData","map","book","id","authors","volumeInfo","title","description","image","imageLinks","thumbnail","console","handleSaveBook","bookToSave","find","Auth","loggedIn","variables","Jumbotron","fluid","className","Container","Form","onSubmit","Row","Col","xs","md","Control","name","value","onChange","e","target","type","size","placeholder","Button","variant","CardColumns","Card","key","border","Img","src","alt","Body","Title","Text","disabled","some","onClick","GET_ME","SavedBooks","useQuery","loading","data","userData","getMe","removeBook","log","handleDeleteBook","savedBooks","SignupForm","username","email","password","userFormData","setUserFormData","validated","showAlert","setShowAlert","createUser","handleInputChange","currentTarget","checkValidity","stopPropagation","login","addUser","noValidate","Alert","dismissible","onClose","show","Group","Label","htmlFor","required","Feedback","LoginForm","loginUser","AppNavbar","showModal","setShowModal","Navbar","bg","expand","Brand","as","Link","to","Toggle","aria-controls","Collapse","Nav","logout","Modal","onHide","aria-labelledby","Tab","defaultActiveKey","Header","closeButton","Item","eventKey","Content","Pane","handleModalClose","client","ApolloClient","request","operation","setContext","headers","authorization","uri","App","exact","path","component","render","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.350ad4a7.chunk.js","sourcesContent":["// use this to decode a token and get the user's information out of it\nimport decode from 'jwt-decode';\n\n// create a new class to instantiate for a user\nclass AuthService {\n  // get user data\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  // check if user's logged in\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken();\n    return !!token && !this.isTokenExpired(token); // handwaiving here\n  }\n\n  // check if token is expired\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else return false;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  getToken() {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem('id_token');\n  }\n\n  login(idToken) {\n    // Saves user token to localStorage\n    localStorage.setItem('id_token', idToken);\n    window.location.assign('/');\n  }\n\n  logout() {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem('id_token');\n    // this will reload the page and reset the state of the application\n    window.location.assign('/');\n  }\n}\n\nexport default new AuthService();\n","export const getSavedBookIds = () => {\n  const savedBookIds = localStorage.getItem('saved_books')\n    ? JSON.parse(localStorage.getItem('saved_books'))\n    : [];\n\n  return savedBookIds;\n};\n\nexport const saveBookIds = (bookIdArr) => {\n  if (bookIdArr.length) {\n    localStorage.setItem('saved_books', JSON.stringify(bookIdArr));\n  } else {\n    localStorage.removeItem('saved_books');\n  }\n};\n\nexport const removeBookId = (bookId) => {\n  const savedBookIds = localStorage.getItem('saved_books')\n    ? JSON.parse(localStorage.getItem('saved_books'))\n    : null;\n\n  if (!savedBookIds) {\n    return false;\n  }\n\n  const updatedSavedBookIds = savedBookIds?.filter((savedBookId) => savedBookId !== bookId);\n  localStorage.setItem('saved_books', JSON.stringify(updatedSavedBookIds));\n\n  return true;\n};\n","import gql from 'graphql-tag';\n\nexport const LOGIN_USER = gql`\n    mutation login($email: String!, $password: String!) {\n      login(email: $email, password: $password) {\n        token\n        user {\n          _id\n          username\n          email\n          bookCount\n          savedBooks {\n            bookId\n            title\n            authors\n            description\n            image\n            link\n          }\n        }\n      }\n    }\n  `;\n\nexport const ADD_USER = gql`\n  mutation addUser($username: String!, $email: String!, $password: String!) {\n    addUser(username: $username, email: $email, password: $password) {\n      token\n      user {\n        _id\n        username\n        email\n      }\n    }\n  }\n`;\n\nexport const SAVE_BOOK = gql`\n  mutation saveBook($book: BookInput!) {\n    saveBook(book: $book) {\n      _id\n      username\n      email\n      bookCount\n      savedBooks {\n        bookId\n        title\n        authors\n        description\n        image\n        link\n      }\n    }\n  }\n`;\n\nexport const REMOVE_BOOK = gql`\n  mutation removeBook($bookId: String!) {\n    removeBook(bookId: $bookId) {\n      _id\n      username\n      email\n      bookCount\n      savedBooks {\n        bookId\n        title\n        authors\n        description\n        image\n        link\n      }\n    }\n  }\n`;","import React, { useState, useEffect } from 'react';\nimport { Jumbotron, Container, Col, Form, Button, Card, CardColumns } from 'react-bootstrap';\nimport Auth from '../utils/auth';\nimport { searchGoogleBooks } from '../utils/API';\nimport { saveBookIds, getSavedBookIds } from '../utils/localStorage';\nimport { useMutation } from '@apollo/react-hooks';\nimport { SAVE_BOOK } from '../utils/mutations';\n\nconst SearchBooks = () => {\n  // create state for holding returned google api data\n  const [searchedBooks, setSearchedBooks] = useState([]);\n  // create state for holding our search field data\n  const [searchInput, setSearchInput] = useState('');\n\n  // create state to hold saved bookId values\n  const [savedBookIds, setSavedBookIds] = useState(getSavedBookIds());\n\n  const [saveBook, { error }] = useMutation(SAVE_BOOK);\n\n  // set up useEffect hook to save `savedBookIds` list to localStorage on component unmount\n  // learn more here: https://reactjs.org/docs/hooks-effect.html#effects-with-cleanup\n  useEffect(() => {\n    return () => saveBookIds(savedBookIds);\n  });\n\n  // create method to search for books and set state on form submit\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    if (!searchInput) {\n      return false;\n    }\n\n    try {\n      const response = await searchGoogleBooks(searchInput);\n\n      if (!response.ok) {\n        throw new Error('something went wrong!');\n      }\n\n      const { items } = await response.json();\n\n      const bookData = items.map((book) => ({\n        bookId: book.id,\n        authors: book.volumeInfo.authors || ['No author to display'],\n        title: book.volumeInfo.title,\n        description: book.volumeInfo.description,\n        image: book.volumeInfo.imageLinks?.thumbnail || '',\n      }));\n\n      setSearchedBooks(bookData);\n      setSearchInput('');\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  // create function to handle saving a book to our database\n  const handleSaveBook = async (bookId) => {\n    // find the book in `searchedBooks` state by the matching id\n    const bookToSave = searchedBooks.find((book) => book.bookId === bookId);\n\n    // get token\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n    if (!token) {\n      return false;\n    }\n\n    try {\n      \n      await saveBook({\n        variables: { book: bookToSave }\n      });\n\n      if (error) {\n        throw new Error('something went wrong!');\n      }\n\n      // if book successfully saves to user's account, save book id to state\n      setSavedBookIds([...savedBookIds, bookToSave.bookId]);\n    } catch (e) {\n      console.error(e);\n    }\n  };\n\n  return (\n    <>\n      <Jumbotron fluid className='text-light bg-dark'>\n        <Container>\n          <h1>Search for Books!</h1>\n          <Form onSubmit={handleFormSubmit}>\n            <Form.Row>\n              <Col xs={12} md={8}>\n                <Form.Control\n                  name='searchInput'\n                  value={searchInput}\n                  onChange={(e) => setSearchInput(e.target.value)}\n                  type='text'\n                  size='lg'\n                  placeholder='Search for a book'\n                />\n              </Col>\n              <Col xs={12} md={4}>\n                <Button type='submit' variant='success' size='lg'>\n                  Submit Search\n                </Button>\n              </Col>\n            </Form.Row>\n          </Form>\n        </Container>\n      </Jumbotron>\n\n      <Container>\n        <h2>\n          {searchedBooks.length\n            ? `Viewing ${searchedBooks.length} results:`\n            : 'Search for a book to begin'}\n        </h2>\n        <CardColumns>\n          {searchedBooks.map((book) => {\n            return (\n              <Card key={book.bookId} border='dark'>\n                {book.image ? (\n                  <Card.Img src={book.image} alt={`The cover for ${book.title}`} variant='top' />\n                ) : null}\n                <Card.Body>\n                  <Card.Title>{book.title}</Card.Title>\n                  <p className='small'>Authors: {book.authors}</p>\n                  <Card.Text>{book.description}</Card.Text>\n                  {Auth.loggedIn() && (\n                    <Button\n                      disabled={savedBookIds?.some((savedBookId) => savedBookId === book.bookId)}\n                      className='btn-block btn-info'\n                      onClick={() => handleSaveBook(book.bookId)}>\n                      {savedBookIds?.some((savedBookId) => savedBookId === book.bookId)\n                        ? 'This book has already been saved!'\n                        : 'Save this Book!'}\n                    </Button>\n                  )}\n                  {/* {error && <div>Save Book failed</div>} */}\n                </Card.Body>\n              </Card>\n            );\n          })}\n        </CardColumns>\n      </Container>\n    </>\n  );\n};\n\nexport default SearchBooks;\n","// route to get logged in user's info (needs the token)\nexport const getMe = (token) => {\n  return fetch('/api/users/me', {\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Bearer ${token}`,\n    },\n  });\n};\n\nexport const createUser = (userData) => {\n  return fetch('/api/users', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(userData),\n  });\n};\n\nexport const loginUser = (userData) => {\n  return fetch('/api/users/login', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(userData),\n  });\n};\n\n// save book data for a logged in user\nexport const saveBook = (bookData, token) => {\n  return fetch('/api/users', {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Bearer ${token}`,\n    },\n    body: JSON.stringify(bookData),\n  });\n};\n\n// remove saved book data for a logged in user\nexport const deleteBook = (bookId, token) => {\n  return fetch(`/api/users/books/${bookId}`, {\n    method: 'DELETE',\n    headers: {\n      authorization: `Bearer ${token}`,\n    },\n  });\n};\n\n// make a search to google books api\n// https://www.googleapis.com/books/v1/volumes?q=harry+potter\nexport const searchGoogleBooks = (query) => {\n  return fetch(`https://www.googleapis.com/books/v1/volumes?q=${query}`);\n};\n","import gql from 'graphql-tag';\n\nexport const GET_ME = gql\n`{\n  me {\n    _id\n    username\n    email\n    bookCount\n    savedBooks {\n      authors\n      title\n      bookId\n      description\n      image\n      link\n    }\n  }\n}`;","import React from 'react';\nimport { Jumbotron, Container, CardColumns, Card, Button } from 'react-bootstrap';\nimport { useQuery, useMutation } from '@apollo/react-hooks';\nimport Auth from '../utils/auth';\nimport { removeBookId } from '../utils/localStorage';\nimport { REMOVE_BOOK } from '../utils/mutations';\nimport { GET_ME } from '../utils/queries'\n\nconst SavedBooks = () => {\n\n  const { loading, data } = useQuery(GET_ME);\n\n  const userData = data?.getMe || {};\n  \n  const [removeBook, { error }] = useMutation(REMOVE_BOOK);\n\n  console.log(userData);\n\n  // create function that accepts the book's mongo _id value as param and deletes the book from the database\n  const handleDeleteBook = async (bookId) => {\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n    \n    if (!token) {\n      return false;\n    }\n\n    try {\n      const { data } = await removeBook({\n        variables: { bookId: bookId }\n      });\n      console.log(data);\n\n      if (error) {\n        throw new Error('something went wrong!');\n      }\n\n      // const updatedUser = await response.json();\n      // setQueryData(updatedUser);\n      // upon success, remove book's id from localStorage\n      removeBookId(bookId);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  // if data isn't here yet, say so\n  if (loading) {\n    return <h2>LOADING...</h2>;\n  }\n\n  return (\n    <>\n      <Jumbotron fluid className='text-light bg-dark'>\n        <Container>\n          <h1>Viewing saved books!</h1>\n        </Container>\n      </Jumbotron>\n      <Container>\n        <h2>\n          {userData.savedBooks.length\n            ? `Viewing ${userData.savedBooks.length} saved ${userData.savedBooks.length === 1 ? 'book' : 'books'}:`\n            : 'You have no saved books!'}\n        </h2>\n        <CardColumns>\n          {userData.savedBooks.map((book) => {\n            return (\n              <Card key={book.bookId} border='dark'>\n                {book.image ? <Card.Img src={book.image} alt={`The cover for ${book.title}`} variant='top' /> : null}\n                <Card.Body>\n                  <Card.Title>{book.title}</Card.Title>\n                  <p className='small'>Authors: {book.authors}</p>\n                  <Card.Text>{book.description}</Card.Text>\n                  <Button className='btn-block btn-danger' onClick={() => handleDeleteBook(book.bookId)}>\n                    Delete this Book!\n                  </Button>\n                </Card.Body>\n              </Card>\n            );\n          })}\n        </CardColumns>\n      </Container>\n    </>\n  );\n};\n\nexport default SavedBooks;","import React, { useState } from 'react';\nimport { Form, Button, Alert } from 'react-bootstrap';\nimport { useMutation } from '@apollo/react-hooks';\nimport { ADD_USER } from '../utils/mutations';\nimport Auth from '../utils/auth';\n\nconst SignupForm = () => {\n  // set initial form state\n  const [userFormData, setUserFormData] = useState({ username: '', email: '', password: '' });\n  // set state for form validation\n  const [validated] = useState(false);\n  // set state for alert\n  const [showAlert, setShowAlert] = useState(false);\n\n  const [createUser, { error }] = useMutation(ADD_USER);\n\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    setUserFormData({ ...userFormData, [name]: value });\n  };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    // check if form has everything (as per react-bootstrap docs)\n    const form = event.currentTarget;\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    try {\n      const { data } = await createUser({\n        variables: {...userFormData}\n      });\n\n      if (error) {\n        throw new Error('something went wrong!');\n      }\n\n      \n      Auth.login(data.addUser.token);\n    } catch (err) {\n      console.error(err);\n      setShowAlert(true);\n    }\n\n    setUserFormData({\n      username: '',\n      email: '',\n      password: '',\n    });\n  };\n\n  return (\n    <>\n      {/* This is needed for the validation functionality above */}\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\n        {/* show alert if server response is bad */}\n        <Alert dismissible onClose={() => setShowAlert(false)} show={showAlert} variant='danger'>\n          Something went wrong with your signup!\n        </Alert>\n\n        <Form.Group>\n          <Form.Label htmlFor='username'>Username</Form.Label>\n          <Form.Control\n            type='text'\n            placeholder='Your username'\n            name='username'\n            onChange={handleInputChange}\n            value={userFormData.username}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Username is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='email'>Email</Form.Label>\n          <Form.Control\n            type='email'\n            placeholder='Your email address'\n            name='email'\n            onChange={handleInputChange}\n            value={userFormData.email}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Email is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='password'>Password</Form.Label>\n          <Form.Control\n            type='password'\n            placeholder='Your password'\n            name='password'\n            onChange={handleInputChange}\n            value={userFormData.password}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Password is required!</Form.Control.Feedback>\n        </Form.Group>\n        <Button\n          disabled={!(userFormData.username && userFormData.email && userFormData.password)}\n          type='submit'\n          variant='success'>\n          Submit\n        </Button>\n      </Form>\n    </>\n  );\n};\n\nexport default SignupForm;\n","// see SignupForm.js for comments\nimport React, { useState } from 'react';\nimport { Form, Button, Alert } from 'react-bootstrap';\nimport { useMutation } from '@apollo/react-hooks';\nimport { LOGIN_USER } from '../utils/mutations';\nimport Auth from '../utils/auth';\n\nconst LoginForm = () => {\n  const [userFormData, setUserFormData] = useState({ email: '', password: '' });\n  const [validated] = useState(false);\n  const [showAlert, setShowAlert] = useState(false);\n\n  const [loginUser, { error }] = useMutation(LOGIN_USER);\n\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    setUserFormData({ ...userFormData, [name]: value });\n  };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    // check if form has everything (as per react-bootstrap docs)\n    const form = event.currentTarget;\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    try {\n      const { data } = await loginUser({\n        variables: { ...userFormData }\n      });\n\n      if (error) {\n        throw new Error('something went wrong!');\n      }\n\n      \n      Auth.login(data.login.token);\n    } catch (err) {\n      console.error(err);\n      setShowAlert(true);\n    }\n\n    setUserFormData({\n      username: '',\n      email: '',\n      password: '',\n    });\n  };\n\n  return (\n    <>\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\n        <Alert dismissible onClose={() => setShowAlert(false)} show={showAlert} variant='danger'>\n          Something went wrong with your login credentials!\n        </Alert>\n        <Form.Group>\n          <Form.Label htmlFor='email'>Email</Form.Label>\n          <Form.Control\n            type='text'\n            placeholder='Your email'\n            name='email'\n            onChange={handleInputChange}\n            value={userFormData.email}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Email is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='password'>Password</Form.Label>\n          <Form.Control\n            type='password'\n            placeholder='Your password'\n            name='password'\n            onChange={handleInputChange}\n            value={userFormData.password}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Password is required!</Form.Control.Feedback>\n        </Form.Group>\n        <Button\n          disabled={!(userFormData.email && userFormData.password)}\n          type='submit'\n          variant='success'>\n          Submit\n        </Button>\n      </Form>\n    </>\n  );\n};\n\nexport default LoginForm;\n","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Navbar, Nav, Container, Modal, Tab } from 'react-bootstrap';\nimport SignUpForm from './SignupForm';\nimport LoginForm from './LoginForm';\n\nimport Auth from '../utils/auth';\n\nconst AppNavbar = () => {\n  // set modal display state\n  const [showModal, setShowModal] = useState(false);\n\n  return (\n    <>\n      <Navbar bg='dark' variant='dark' expand='lg'>\n        <Container fluid>\n          <Navbar.Brand as={Link} to='/'>\n            Google Books Search\n          </Navbar.Brand>\n          <Navbar.Toggle aria-controls='navbar' />\n          <Navbar.Collapse id='navbar'>\n            <Nav className='ml-auto'>\n              <Nav.Link as={Link} to='/'>\n                Search For Books\n              </Nav.Link>\n              {/* if user is logged in show saved books and logout */}\n              {Auth.loggedIn() ? (\n                <>\n                  <Nav.Link as={Link} to='/saved'>\n                    See Your Books\n                  </Nav.Link>\n                  <Nav.Link onClick={Auth.logout}>Logout</Nav.Link>\n                </>\n              ) : (\n                <Nav.Link onClick={() => setShowModal(true)}>Login/Sign Up</Nav.Link>\n              )}\n            </Nav>\n          </Navbar.Collapse>\n        </Container>\n      </Navbar>\n      {/* set modal data up */}\n      <Modal\n        size='lg'\n        show={showModal}\n        onHide={() => setShowModal(false)}\n        aria-labelledby='signup-modal'>\n        {/* tab container to do either signup or login component */}\n        <Tab.Container defaultActiveKey='login'>\n          <Modal.Header closeButton>\n            <Modal.Title id='signup-modal'>\n              <Nav variant='pills'>\n                <Nav.Item>\n                  <Nav.Link eventKey='login'>Login</Nav.Link>\n                </Nav.Item>\n                <Nav.Item>\n                  <Nav.Link eventKey='signup'>Sign Up</Nav.Link>\n                </Nav.Item>\n              </Nav>\n            </Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <Tab.Content>\n              <Tab.Pane eventKey='login'>\n                <LoginForm handleModalClose={() => setShowModal(false)} />\n              </Tab.Pane>\n              <Tab.Pane eventKey='signup'>\n                <SignUpForm handleModalClose={() => setShowModal(false)} />\n              </Tab.Pane>\n            </Tab.Content>\n          </Modal.Body>\n        </Tab.Container>\n      </Modal>\n    </>\n  );\n};\n\nexport default AppNavbar;\n","import React from 'react';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport ApolloClient from 'apollo-boost';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport SearchBooks from './pages/SearchBooks';\nimport SavedBooks from './pages/SavedBooks';\nimport Navbar from './components/Navbar';\n\nconst client = new ApolloClient({\n  request: operation => {\n    const token = localStorage.getItem('id_token');\n\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : ''\n      }\n    });\n  },\n  uri: '/graphql'\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <>\n          <Navbar />\n          <Switch>\n            <Route exact path='/' component={SearchBooks} />\n            <Route exact path='/saved' component={SavedBooks} />\n            <Route render={() => <h1 className='display-2'>Wrong page!</h1>} />\n          </Switch>\n        </>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}